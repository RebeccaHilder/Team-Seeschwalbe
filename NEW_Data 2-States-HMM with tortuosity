
############################################################################  
#######  2-States HMM for seebirds with tortuosity with new dataset  #######
############################################################################                                                                                

#### Import and edit data ####
setwd("~/Uni/Lernstoff/Master/3. Semester/04 Statistical Consulting/Daten")
# New dataset
dat <- read.csv("NEW_slick2-h1-h2.csv")
# Recoding the first column name
colnames(dat)[1] <- "ID"
# Replace all values greater than 4 with NA
#T4 <-which(dat$time_to_slick>=4)
#dat$time_to_slick[T4]<- "NaN"
#table(dat$time_to_slick=="NaN")

## Load packages
#install.packages("HiddenMarkov")
library(HiddenMarkov)
library(moveHMM)

## Overview
View(dat)
head(dat)
table(dat$ID) # Number of observations per tern
#which(dat$Freq >700) #which terns have more than 700 observations
#sum(dat$Freq >700)   #how many terns have more than 700 observations

## Dataset only with terns that have >700 observation points
# Create new column with frequency for 
#data2 <- dat$ID
#x <- data.frame(data2, freq=ave(seq_along(data2), data2, FUN=length))
#dat$freq <- x$freq
# New datatset
#dat_700 <- subset(dat, dat$freq > 700)


## For all data points:
# High values must be changed
which(dat$tortuosity==1)
ind<-which(dat$tortuosity==1)
dat$tortuosity[ind]<-rep(1.01,length(ind)) 


## Prepare data
#data <- prepData(dat_700, type="UTM")
data <- prepData(dat, type="UTM")

## First overview of flight characteristics
for(i in unique(data$ID)){
  plot(data$y[which(data$ID==i)]~data$x[which(data$ID==i)],main=i,xlab="x",ylab="y",type="p", pch=20)
} #Tern-h2-51 is amazing

#### Using log(tortuosity) ####
## New column in dataset with log of tortuosity
data$log.tort <- log(data$tortuosity)
#View(data)

#### Fitting 2-States HMM with tortuosity ####

mllk.tort <- function(theta.star, x, N){
  Gamma <- diag(N)  
  Gamma[!Gamma] <- exp(theta.star[1:2]) 
  Gamma <- Gamma/rowSums(Gamma) 
  delta <- solve(t(diag(N)-Gamma+1),rep(1,N)) 
  mu.tort <- cumsum(exp(theta.star[3:4]))
  sigma <- cumsum(exp(theta.star[5:6])) 
  allprobs <- matrix(1,dim(x)[1],N)
  ind <- which(!is.na(x$log.tort))
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  foo <- delta%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    foo <- phi%*%Gamma%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=2

# Finding starting values
hist(data$log.tort, breaks=1000, main = "Histogram of log(tortuosity)", xlab = "log(tort)", xlim=c(0,0.1))
# Starting values
theta.star <- c(rep(-2,(N-1)*N),log(c(0.005,0.04)),log(c(0.01,0.04)))
#theta.star <- c(rep(-2,(N-1)*N),log(c(0.01,0.006)),log(c(0.01,0.006)))

# Numerical maximization 
mod.tort <- nlm(mllk.tort,theta.star,x=data,N=N,print.level=2,iterlim=500, stepmax = 10)
theta.star.mle = mod.tort$estimate

# Back-transformation
Gamma <- diag(N)
Gamma[!Gamma] <- exp(theta.star.mle[1:((N-1)*N)])
Gamma <- Gamma/rowSums(Gamma)
delta <- solve(t(diag(N)-Gamma+1),rep(1,N))
mu.tort <- cumsum(exp(theta.star.mle[(N-1)*N+1:N]))
sigma <- cumsum(exp(theta.star.mle[(N-1)*N+(N+1):(2*N)]))

round(Gamma, 4)
mu.tort
sigma
delta


#### 2-States HMM visualization ####
# State dependent distributions
#hist(data$log.tort,probability=TRUE,breaks=1000,col="light grey",xlab="log(tort)",main="State-dependent distributions", xlim= c(0,0.1))
hist(data$log.tort,probability=TRUE,breaks=1000,col="light grey",xlab="log(tort)",main="", xlim= c(0,0.1))
curve(delta[1]*dgamma(x,shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),add=TRUE,col="#E69F00", lwd=2 , n=1001)
curve(delta[2]*dgamma(x,shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]),add=TRUE,col="#56B4E9", lwd=2 , n=1001)
curve(delta[1]*dgamma(x,shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1])
      +delta[2]*dgamma(x,shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]),add=TRUE,col="black", lwd=2, lty=2 , n=1001)
colors <- c("#E69F00", "#56B4E9", "black")
legend("topright", inset = c(0,0), legend= c("State 1: flying/searching", "State 2: hovering/foraging","Marginal distribution"), pch = 16, col=colors)

#### 2-States HMM visualization for Report ####
#par(mfrow=c(2,1))
#hist(data$log.tort, probability = TRUE, breaks = 2500, col = "light grey", xlab = "",
# main = "",ylab="", xlim = c(0,0.1), ylim = c(0,120)) #main = "State-dependent distributions"
#Gespeichert als Format 10x22
hist(data$log.tort, probability = TRUE, breaks = 3000, col = "light grey", xlab = "", ylab = "",
     main = "", xlim = c(0,0.06), ylim = c(0,130)) #main = "State-dependent distributions"
title(main = "", cex.main = 2 , cex.lab = 1.5, xlab="log(tort)",ylab="Density")
curve(delta[1]*dgamma(x,shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),add=TRUE,col="#E69F00", lwd=8 , n=1001)
curve(delta[2]*dgamma(x,shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]),add=TRUE,col="#56B4E9", lwd=8 , n=1001)
curve(delta[1]*dgamma(x,shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1])
      +delta[2]*dgamma(x,shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]),add=TRUE,col="black", lwd=4, lty=2 , n=1001)
colors <- c("#E69F00", "#56B4E9", "black")
legend("topright", inset = c(-0.35,0.1), legend= c("State 1: Flying/Searching", "State 2: Hovering/Foraging","Marginal distribution"), 
       lty = c(1,1,2), lwd = c(8,8,4), cex = 1.5, bty = "n", col=colors)


#### Global decoding ####

viterbi <- function(x,mu.tort,sigma,Gamma,delta){
  n <- length(x)
  allprobs <- matrix(1,n,2)
  ind <- which(!is.na(x))
  allprobs[ind,] <- cbind(dgamma(x[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  xi <- matrix(0,n,2)
  foo <- delta*allprobs[1,]
  xi[1,] <- foo/sum(foo)
  for (t in 2:n) {
    foo <- apply(xi[t-1,]*Gamma,2,max)*allprobs[t,]
    xi[t,] <- foo/sum(foo)
  }
  iv <- numeric(n)
  iv[n] <- which.max(xi[n,])
  for (t in (n-1):1){
    iv[t] <- which.max(Gamma[,iv[t+1]]*xi[t,])
  }
  iv
}


#pdf("2-States HMM tortuosity decoding.pdf", width=8.27, height=11.69) #all plots are directly saved in the folder of the dataset
par(mfrow=c(2,1))
colors <- c("#E69F00", "#56B4E9")
for(i in unique(data$ID)){
  #i="Tern-h2-51"
  x=data$log.tort[which(data$ID==i)]
  vitstates2 <- viterbi(x,mu.tort,sigma,Gamma,delta)
  plot(data$y[which(data$ID==i)]~data$x[which(data$ID==i)],main="",xlab="",ylab="",col=colors[vitstates2],type="p", pch=20)
  title(main = i, cex.main = 2, cex.lab = 1.5, xlab="x",ylab="y")
  plot(x,main="", xlab="",ylab="",col=colors[vitstates2],type="p", pch=20, , xlim = c(0,4330), ylim = c(0,0.08)) # xlim=c(0,3000), ylim=c(0,1))
  title(main = i, cex.main = 2, cex.lab = 1.5, xlab="time",ylab="log(tort)")
  #plot(x,xlab="time",ylab="log(tort)",col=colors[vitstates2],type="p", pch=20, xlim=c(0,1000), ylim=c(0,0.5))
}
#dev.off()
par(mfrow=c(1,1))


#### 2-States-HMM with covariates ####

### Dummy-covariate "slick" 
mllk.slick <- function(theta.star,x){
  mu.tort <- cumsum(exp(theta.star[1:2]))
  sigma <- cumsum(exp(theta.star[3:4]))
  delta <- c(plogis(theta.star[5]),1-plogis(theta.star[5]))
  beta <- cbind(theta.star[6:7],theta.star[8:9])
  allprobs <- matrix(1,dim(x)[1],2)
  ind <- which(!is.na(x$log.tort)) # indices of non-missing step lengths
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  #for (j in 1:2){
  #  allprobs[,j] <- dgamma(x$step,shape=mu.step[j]^2/sigma[j]^2,scale=sigma[j]^2/mu.step[j])
  #}
  foo <- delta%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    eta <- beta[,1]+beta[,2]*x[t,"slick"]
    Gamma <- diag(2)
    # tpm has to be updated after every new estimation of the beta values
    Gamma[!Gamma] <- exp(eta) # assign values to the off-diagonal entries of the Gamma-matrix
    Gamma <- Gamma/rowSums(Gamma)
    foo <- phi%*%Gamma%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=2

# Starting values
delta0 <- 0.5
beta0 <- rep(-2,N*(N-1))
beta1 <- rep(0,N*(N-1))

# Numerical maximization 
theta.star <- c(log(mu.tort),log(sigma),qlogis(delta0), beta0, beta1)
mod_slick <- nlm(mllk.slick,theta.star,x=data,print.level=2, iterlim=500, stepmax = 10)

# Back-transformation
#mu_slick <- exp(mod_slick$estimate[1:2])
mu_slick <- cumsum(exp(mod_slick$estimate[1:2]))
sigma_slick <- cumsum(exp(mod_slick$estimate[3:4]))
mu_slick
sigma_slick


### Covariate "time-to-slick"

# Change NAs to infinity
data$time_to_slick[is.na(data$time_to_slick)]<-Inf
# new column with inverse of time-to-slick
data$inverse.tts <- 1/(data$time_to_slick+1) # 1=near slick, 0=far away
hist(data$inverse.tts)

# 2-States HMM for "time-to-slick"
mllk.tts <- function(theta.star,x){
  mu.tort <- cumsum(exp(theta.star[1:2]))
  sigma <- cumsum(exp(theta.star[3:4]))
  delta <- c(plogis(theta.star[5]),1-plogis(theta.star[5]))
  beta <- cbind(theta.star[6:7],theta.star[8:9])
  allprobs <- matrix(1,dim(x)[1],2)
  ind <- which(!is.na(x$log.tort)) 
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  foo <- delta%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    eta <- beta[,1]+beta[,2]*x[t,"inverse.tts"]
    Gamma <- diag(2)
    Gamma[!Gamma] <- exp(eta)
    Gamma <- Gamma/rowSums(Gamma)
    foo <- phi%*%Gamma%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=2

# Starting values
delta0 <- 0.5
beta0 <- rep(-2,N*(N-1))
beta1 <- rep(0,N*(N-1))

# Numerical maximization 
theta.star <- c(log(mu.tort),log(sigma),qlogis(delta0), beta0, beta1)
mod_tts <- nlm(mllk.tts,theta.star,x=data,print.level=2, iterlim=500, stepmax = 10)

# Back-transformation
mu_tts <- cumsum(exp(mod_tts$estimate[1:2]))
sigma_tts <- cumsum(exp(mod_tts$estimate[3:4]))
mu_tts
sigma_tts


#### Model selection ####
## AIC
aic <- numeric(3)
aic[1] <- 2*mod.tort$minimum + 2*length(mod.tort$estimate)
aic[2] <- 2*mod_slick$minimum + 2*length(mod_slick$estimate)
aic[3] <- 2*mod_tts$minimum + 2*length(mod_tts$estimate)
aic
which.min(aic) 
#plot(1:2,aic,type='b',main='AIC values',xlab='number of covariates',ylab='AIC')


## BIC
bic <- numeric(3)
T <- dim(data)[1]
bic[1] <- 2*mod.tort$minimum + log(T)*length(mod.tort$estimate)
bic[2] <- 2*mod_slick$minimum + log(T)*length(mod_slick$estimate)
bic[3] <- 2*mod_tts$minimum + log(T)*length(mod_tts$estimate)
bic
which.min(bic)


#### Gamma Plots ####

# Generate the 2-HMM with covariate "time-to-slick" first

# Create gamma for dummy varibale "slick"
beta_slick <- cbind(mod_slick$estimate[6:7],mod_slick$estimate[8:9])
eta <- beta_slick[,1]+beta_slick[,2]*0   # without tts
Gamma_slick <- diag(2)
Gamma_slick[!Gamma_slick] <- exp(eta) 
Gamma_slick <- Gamma_slick/rowSums(Gamma_slick)
Gamma_slick
eta1 <- beta_slick[,1]+beta_slick[,2]*1  # with tts
Gamma_slick1 <- diag(2)
Gamma_slick1[!Gamma_slick1] <- exp(eta1) 
Gamma_slick1 <- Gamma_slick1/rowSums(Gamma_slick1)
Gamma_slick1

# Stationary distribution
delta<-solve(t(diag(2)-Gamma_slick+1),c(1,1))
delta
delta1 <- solve(t(diag(2)-Gamma_slick1+1),c(1,1))
delta1

#Assign betas
beta0_tts <- mod_tts$estimate[6:7]
beta1_tts <- mod_tts$estimate[8:9]
beta0_tts
beta1_tts

tts.seq <- seq(0,1, length = 1000)

## Gamma plots ##

# Changing prob 1 to 1 
Gamma11 <- rep(NA,1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts <- diag(2)
  Gamma.tts[!Gamma.tts] <- exp(eta) 
  Gamma.tts <- Gamma.tts/rowSums(Gamma.tts)
  Gamma11[k] <- Gamma.tts[1,1]
}
# Changing prob 2 to 2
Gamma22 <- rep(NA,1000)
tts.seq <- seq(0,1, length= 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts <- diag(2)
  Gamma.tts[!Gamma.tts] <- exp(eta) 
  Gamma.tts <- Gamma.tts/rowSums(Gamma.tts)
  Gamma22[k] <- Gamma.tts[2,2]
}
# Changing prob 1 to 2 
Gamma12 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts <- diag(2)
  Gamma.tts[!Gamma.tts] <- exp(eta) 
  Gamma.tts <- Gamma.tts/rowSums(Gamma.tts)
  Gamma12[k] <- Gamma.tts[1,2]
}
# Changing prob 2 to 1 
Gamma21 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts <- diag(2)
  Gamma.tts[!Gamma.tts] <- exp(eta) 
  Gamma.tts <- Gamma.tts/rowSums(Gamma.tts)
  Gamma21[k] <- Gamma.tts[2,1]
}

# Graphical illustration
par(mfrow = c(2,2))
plot(Gamma11 ~ tts.seq, main = "Gamma11", ylab = "P(1->1)", xlab = "tts", ylim = c(0.95,1), 
     type="l", lwd=5)
plot(Gamma12 ~ tts.seq, main = "Gamma12", ylab = "P(1->2)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma21 ~ tts.seq, main = "Gamma21", ylab = "P(2->1)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma22 ~ tts.seq, main = "Gamma22", ylab = "P(2->2)", xlab = "tts", ylim = c(0.95,1), 
     type="l", lwd=5)
par(mfrow = c(1,1))


#### Model checking with simulation ####
par(mfrow = c(1,2))
set.seed(7265)
n <- 65181
x <- s <- rep(NA,n)
s[1] <- sample(1:2,size=1,prob=delta)
x[1] <- rgamma(1,shape=mu.tort[s[1]]^2/sigma[s[1]]^2,scale=sigma[s[1]]^2/mu.tort[s[1]])

for (t in 2:n){
  s[t] <- sample(1:2,size=1,prob=Gamma[s[t-1],])
  x[t] <- rgamma(1,shape=mu.tort[s[t]]^2/sigma[s[t]]^2,scale=sigma[s[t]]^2/mu.tort[s[t]])
}

# Graphical comparison
par(mfrow = c(1,2))
hist(x,xlim=c(0,0.2),breaks=seq(0,3,length=200), ylim = c(0,50000),main = "", xlab="",ylab="") #Simulated data
title(main = "", cex.lab = 1.5, xlab="x",ylab="Frequency")
hist(data$log.tort,xlim=c(0,0.2),breaks=seq(0,3,length=200),main = "", xlab="",ylab="") #Emprical data
title(main = "", cex.lab = 1.5, xlab="log(tort)",ylab="Frequency")


#### Model checking with pseudo-residuals #####

d <- dthmm(data$log.tort, Gamma, delta, "gamma", list(shape=c(mu.tort[1]^2/sigma[1]^2,mu.tort[2]^2/sigma[2]^2),scale=c(sigma[1]^2/mu.tort[1],sigma[2]^2/mu.tort[2])))
resids <- residuals(d)

# Check for outliers, cause Q-Q plot does not work with inf values
which(resids==Inf)
# 17091, 17092, 17093, 17094, 17100, 48690, 48691, 53749, 53758, 53759
# Remove outliers
data.resid <- data[-17091,] # remove 17091
data.resid <- data.resid[-17091,] # remove 17092
data.resid <- data.resid[-17091,] # remove 17093
data.resid <- data.resid[-17091,] # remove 17094
data.resid <- data.resid[-17096,] # remove 17100
data.resid <- data.resid[-48685,] # remove 48690
data.resid <- data.resid[-48685,] # remove 48691
data.resid <- data.resid[-53742,] # remove 53749
data.resid <- data.resid[-53750,] # remove 53758
data.resid <- data.resid[-53750,] # remove 53759

# Redefine residuals
d <- dthmm(data.resid$log.tort, Gamma, delta, "gamma", list(shape=c(mu.tort[1]^2/sigma[1]^2,mu.tort[2]^2/sigma[2]^2),scale=c(sigma[1]^2/mu.tort[1],sigma[2]^2/mu.tort[2])))
resids <- residuals(d)

## Plots
#par(mfrow = c(2,2))

# Histogram of pseudo-residuals
hist(resids, freq=F,main = "", xlab="",ylab="")
title(main = "", cex.lab = 1.5, xlab="Resids",ylab="Density")
m <- mean(resids)
s <-  sd(resids)
x <- resids
curve(dnorm(x,m,s),add=TRUE,lwd=3, col="blue")

# Normal Q-Q-Plot
qqnorm(resids,main = "", xlab="",ylab="")
title(main = "", cex.lab = 1.5, xlab="Theoretical Quantiles",ylab="Sample Quantiles")
qqline(resids)

# Time series of pseudo-residuals
plot(resids,main = "", xlab="",ylab="")
title(main = "", cex.lab = 1.5, xlab="Index",ylab="Resids")


# ACF of the pseudo-residuals
acf(resids,main = "", xlab="",ylab="")
title(main = "", cex.lab = 1.5, xlab="Lag",ylab="ACF")

#par(mfrow = c(1,1))

# Time series of pseudo-residuals
plot(resids)
plot(resids, col=ifelse(resids>=4,"darkred","black"))
data.resid$residuals <- resids

which(resids>4)
table(data.resid[which(resids>4),]$ID)

data.resid.outlier <- rbind(data.resid[which(resids>4),])
plot(data.resid.outlier$residuals)

## Time series decoded for log(tort) of all outliers
vitstates2 <- viterbi(data.resid.outlier$log.tort,mu.tort,sigma,Gamma,delta)
plot(data.resid.outlier$log.tort,xlab="time",ylab="log(tort)",col=colors[vitstates2],type="p", pch=20, ylim=c(0,1))
legend("bottomright", inset = c(0,0), legend= c("Flying/Hovering", "Foraging"), pch = 16, col=colors)

## Time series decoded separately
#"Tern-h2-58" and "Tern-h1-2" returns Error (only one point)
table(data.resid.outlier$ID)
T_h2_58 <- which(data.resid.outlier$ID=="Tern-h2-58")
data.resid.outlier <- data.resid.outlier[-261,] # remove 261
T_h1_2 <- which(data.resid.outlier$ID=="Tern-h1-2")
data.resid.outlier <- data.resid.outlier[-1,] # remove 1
#plots
par(mfrow = c(4,4))
colors <- c("#E69F00", "#56B4E9")
for(i in unique(data.resid.outlier$ID)){
  x=data.resid.outlier$log.tort[which(data.resid.outlier$ID==i)]
  vitstates2 <- viterbi(x,mu.tort,sigma,Gamma,delta)
  plot(x,xlab="time",ylab="log(tort)",main=i,col=colors[vitstates2],type="p",lwd=5, pch=20, ylim=c(0,1))
  #legend("topright", inset = c(0,0), legend= c("Flying/Hovering", "Foraging"), pch = 16, col=colors)
  
}


#### Likelihood-ratio test ####

# H0: both models equally good
# H1: the larger model is the better one
# test statistic:
(-1)*2*mod_tts$minimum-(-1)*2*mod.tort$minimum #48.45055
# chi-squared distribution:
qchisq(0.95,2) #5.991465
# 48.45055 > 5.991465 -> reject H0
# model, which includes "time-to-slick", is significantly better

