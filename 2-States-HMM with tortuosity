#### Team-Seeschwalbe - Tortuosity

#### Daten einlesen und bearbeiten ####
setwd("~/Uni/Lernstoff/Master/3. Semester/04 Statistical Consulting/Daten")
dat <- read.csv("slick2-h1-h2.csv")

## Pakete laden
#install.packages("HiddenMarkov")
library(HiddenMarkov)
library(moveHMM)

## Daten anzeigen
View(dat)
head(dat)

## Anzahl der Beobachtungen pro Tern
table(dat$ID)

## neue Spalte im Datensatz erstellen mit der Frequency
data2 <- dat$ID
x <- data.frame(data2, freq=ave(seq_along(data2), data2, FUN=length))
dat$freq <- x$freq

#which(data_frame$Freq >400) #welche Terns haben mehr als 400 Beobachtungen
#sum(data_frame$Freq >400) #wie viele Terns haben mehr als 400 Beobachtungen

## Datensatz nur mit Terns, die >400 bzw. >700 Beobachtungspunkte besitzen
#dat_400 <- subset(dat, dat$freq > 400)
dat_700 <- subset(dat, dat$freq > 700)

## Daten aufbereiten
data <- prepData(dat_700, type="UTM")

#### log(tortuosity) dem Datensatz beifügen ####

## neue Spalte im Datensatz mit log von tortuosity
data$log.tort <- log(data$tortuosity)
#View(data)

#### fitting 2-States HMM with tortuosity####

mllk.tort <- function(theta.star, x, N){
  Gamma <- diag(N) #identity matrix 
  Gamma[!Gamma] <- exp(theta.star[1:2]) #turn zeros in matrix (off-diagonal entries) into exponentials of theta-stars
  Gamma <- Gamma/rowSums(Gamma) #devide by row sums so that entries of a row sum to 1 (transformation is inverse logit link)
  delta <- solve(t(diag(N)-Gamma+1),rep(1,N)) #stationary distribution erstellen
  mu.tort <- exp(theta.star[3:4]) #Mittelwert
  sigma <- exp(theta.star[5:6]) #Varianz
  allprobs <- matrix(1,dim(x)[1],N)
  ind <- which(!is.na(x$log.tort)) # indices of non-missing tortuosities
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  foo <- delta%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    foo <- phi%*%Gamma%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=2

# finding starting values
hist(data$log.tort, breaks=400, main = "Histogram of log(tortuosity)", xlab = "log(tort)", xlim=c(0,0.1))
#starting values
theta.star <- c(rep(-2,(N-1)*N),log(c(0.005,0.04)),log(c(0.005,0.01)))

# numerical maximization 
mod.tort <- nlm(mllk.tort,theta.star,x=data,N=N,print.level=1,iterlim=500)
theta.star.mle = mod.tort$estimate

#back-transformation
Gamma <- diag(N)
Gamma[!Gamma] <- exp(theta.star.mle[1:((N-1)*N)])
Gamma <- Gamma/rowSums(Gamma)
delta <- solve(t(diag(N)-Gamma+1),rep(1,N))
mu.tort <- exp(theta.star.mle[(N-1)*N+1:N])
sigma <- exp(theta.star.mle[(N-1)*N+(N+1):(2*N)])

round(Gamma, 4) #Matrix auf 4 Nachkommastellen gerundet
mu.tort
sigma
delta


#### 2-States HMM with speed grafische Darstellung ####
# State dependent distributions
hist(data$log.tort,probability=TRUE,breaks=500,col="light grey",xlab="log(tort)",main="State-dependent distributions", xlim= c(0,0.1))
curve(delta[1]*dgamma(x,shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),add=TRUE,col="#E69F00", lwd=2)
curve(delta[2]*dgamma(x,shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]),add=TRUE,col="#56B4E9", lwd=2)
curve(delta[1]*dgamma(x,shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1])
      +delta[2]*dgamma(x,shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]),add=TRUE,col="black", lwd=2, lty=2)
colours <- c("#E69F00", "#56B4E9", "black")
legend("topright", inset = c(0,0), legend= c("State 1","State 2","Sum of densities"), pch = 16, col=colours)


#### 2-States HMM with speed global decoding ####

viterbi <- function(x,mu.tort,sigma,Gamma,delta){
  n <- length(x)
  allprobs <- matrix(1,n,2)
  ind <- which(!is.na(x))
  allprobs[ind,] <- cbind(dgamma(x[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  xi <- matrix(0,n,2)
  foo <- delta*allprobs[1,]
  xi[1,] <- foo/sum(foo)
  for (t in 2:n) {
    foo <- apply(xi[t-1,]*Gamma,2,max)*allprobs[t,]
    xi[t,] <- foo/sum(foo)
  }
  iv <- numeric(n)
  iv[n] <- which.max(xi[n,])
  for (t in (n-1):1){
    iv[t] <- which.max(Gamma[,iv[t+1]]*xi[t,])
  }
  iv
}

#### Global decoding ####

#pdf("2-States HMM tortuosity decoding.pdf", width=8.27, height=11.69) #speichert alle Plots direkt im Ordner des Datensatzes (Zusatz von Ina)
par(mfrow=c(2,1))
colors <- c("#E69F00", "#56B4E9")
for(i in unique(data$ID)){
  x=data$log.tort[which(data$ID==i)]
  vitstates2 <- viterbi(x,mu.tort,sigma,Gamma,delta)
  plot(data$y[which(data$ID==i)]~data$x[which(data$ID==i)],main=i,xlab="x",ylab="y",col=colors[vitstates2],type="p", pch=20)
  plot(x,xlab="time",ylab="log(tort)",col=colors[vitstates2],type="p", pch=20, xlim=c(0,3000), ylim=c(0,1))
}
dev.off()



#### 2-States-HMM with covariates ####

### dummy-covariate slick
mllk.slick <- function(theta.star,x){
  mu.tort <- exp(theta.star[1:2])
  sigma <- exp(theta.star[3:4])
  delta <- c(plogis(theta.star[5]),1-plogis(theta.star[5]))
  beta <- cbind(theta.star[6:7],theta.star[8:9])
  allprobs <- matrix(1,dim(x)[1],2)
  ind <- which(!is.na(x$log.tort)) # indices of non-missing step lengths
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  #for (j in 1:2){
  #  allprobs[,j] <- dgamma(x$step,shape=mu.step[j]^2/sigma[j]^2,scale=sigma[j]^2/mu.step[j])
  #}
  foo <- delta%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    eta <- beta[,1]+beta[,2]*x[t,"slick"]
    Gamma <- diag(2)
    # tpm has to be updated after every new estimation of the beta values
    Gamma[!Gamma] <- exp(eta) # assign values to the off-diagonal entries of the Gamma-matrix
    Gamma <- Gamma/rowSums(Gamma)
    foo <- phi%*%Gamma%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=2

#starting values
delta0 <- 0.5
# choose beta0 such that the diagonal elements of the resulting Gamma matrix will be highest (similar to starting values for gamma_ij)
beta0 <- rep(-2,N*(N-1))
# here my initial guess is that our covariate has no effect on the state process and hence I set all beta1 values to zero
beta1 <- rep(0,N*(N-1))

theta.star <- c(log(mu.tort),log(sigma),qlogis(delta0), beta0, beta1)
mod_slick <- nlm(mllk.slick,theta.star,x=data,print.level=2, iterlim=500)

# natural parameters
mu_slick <- exp(mod_slick$estimate[1:2])
sigma_slick <- exp(mod_slick$estimate[3:4])
mu_slick
sigma_slick


### covariate time-to-slick
# change NAs to infinity
data$time_to_slick[is.na(data$time_to_slick)]<-Inf
# new column with inverse of time-to-slick
data$inverse.tts <- 1/(data$time_to_slick+1) # 1=near slick, 0=far away
hist(data$inverse.tts)

mllk.tts <- function(theta.star,x){
  mu.tort <- exp(theta.star[1:2])
  sigma <- exp(theta.star[3:4])
  delta <- c(plogis(theta.star[5]),1-plogis(theta.star[5]))
  beta <- cbind(theta.star[6:7],theta.star[8:9])
  allprobs <- matrix(1,dim(x)[1],2)
  ind <- which(!is.na(x$log.tort)) # indices of non-missing step lengths
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  foo <- delta%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    eta <- beta[,1]+beta[,2]*x[t,"inverse.tts"]
    Gamma <- diag(2)
    # tpm has to be updated after every new estimation of the beta values
    Gamma[!Gamma] <- exp(eta) # assign values to the off-diagonal entries of the Gamma-matrix
    Gamma <- Gamma/rowSums(Gamma)
    foo <- phi%*%Gamma%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=2

#starting values
delta0 <- 0.5
# choose beta0 such that the diagonal elements of the resulting Gamma matrix will be highest (similar to starting values for gamma_ij)
beta0 <- rep(-2,N*(N-1))
# here my initial guess is that our covariate has no effect on the state process and hence I set all beta1 values to zero
beta1 <- rep(0,N*(N-1))

theta.star <- c(log(mu.tort),log(sigma),qlogis(delta0), beta0, beta1)
mod_tts <- nlm(mllk.tts,theta.star,x=data,print.level=2, iterlim=500)

# natural parameters
mu_tts <- exp(mod_tts$estimate[1:2])
sigma_tts <- exp(mod_tts$estimate[3:4])
mu_tts
sigma_tts


#### Model selection ####
## AIC
aic <- numeric(3)
aic[1] <- 2*mod.tort$minimum + 2*length(mod.tort$estimate)
aic[2] <- 2*mod_slick$minimum + 2*length(mod_slick$estimate)
aic[3] <- 2*mod_tts$minimum + 2*length(mod_tts$estimate)
aic
which.min(aic) 
#plot(1:2,aic,type='b',main='AIC values',xlab='number of covariates',ylab='AIC')


## BIC
bic <- numeric(3)
T <- dim(data)[1]
bic[1] <- 2*mod.tort$minimum + log(T)*length(mod.tort$estimate)
bic[2] <- 2*mod_slick$minimum + log(T)*length(mod_slick$estimate)
bic[3] <- 2*mod_tts$minimum + log(T)*length(mod_tts$estimate)
bic
which.min(bic)


#### Gamma Plots ####

# Vorher Modell "covariate time-to-slick" des 2-HMM einlesen 

#Gamma für dummy Varibale erstellen
beta_slick <- cbind(mod_slick$estimate[6:7],mod_slick$estimate[8:9])
eta <- beta_slick[,1]+beta_slick[,2]*0
#eta <- beta_slick[,1]+beta_slick[,2]*1
Gamma_slick <- diag(2)
# tpm has to be updated after every new estimation of the beta values
Gamma_slick[!Gamma_slick] <- exp(eta) # assign values to the off-diagonal entries of the Gamma-matrix
Gamma_slick <- Gamma_slick/rowSums(Gamma_slick)
Gamma_slick

#stationäre Verteilung
delta<-solve(t(diag(2)-Gamma_slick+1),c(1,1))
delta

## Gamma Plot erstellen ##
#Manueller Vergleich
Gamma_tts
Gamma

#betas definieren
beta0_tts <- mod_tts$estimate[6:7]
beta1_tts <- mod_tts$estimate[8:9]
beta0_tts
beta1_tts

tts.seq <- seq(0,1, length = 1000)

# changing prob 1 to 1 
Gamma11 <- rep(NA,1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts <- diag(2)
  Gamma.tts[!Gamma.tts] <- exp(eta) 
  Gamma.tts <- Gamma.tts/rowSums(Gamma.tts)
  Gamma11[k] <- Gamma.tts[1,1]
}
# changing prob 2 to 2
Gamma22 <- rep(NA,1000)
tts.seq <- seq(0,1, length= 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts <- diag(2)
  Gamma.tts[!Gamma.tts] <- exp(eta) 
  Gamma.tts <- Gamma.tts/rowSums(Gamma.tts)
  Gamma22[k] <- Gamma.tts[2,2]
}
# changing prob 1 to 2 
Gamma12 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts <- diag(2)
  Gamma.tts[!Gamma.tts] <- exp(eta) 
  Gamma.tts <- Gamma.tts/rowSums(Gamma.tts)
  Gamma12[k] <- Gamma.tts[1,2]
}
# changing prob 2 to 1 
Gamma21 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts <- diag(2)
  Gamma.tts[!Gamma.tts] <- exp(eta) 
  Gamma.tts <- Gamma.tts/rowSums(Gamma.tts)
  Gamma21[k] <- Gamma.tts[2,1]
}

# graphical illustration
par(mfrow = c(2,2))
plot(Gamma11 ~ tts.seq, main = "Gamma11", ylab = "P(1->1)", xlab = "slick", ylim = c(0.95,1), 
     type="l", lwd=5)
plot(Gamma12 ~ tts.seq, main = "Gamma12", ylab = "P(1->2)", xlab = "slick", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma21 ~ tts.seq, main = "Gamma21", ylab = "P(2->1)", xlab = "slick", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma22 ~ tts.seq, main = "Gamma22", ylab = "P(2->2)", xlab = "slick", ylim = c(0.95,1), 
     type="l", lwd=5)
dev.off()


#### model checking simulation####

set.seed(7265)
n <- 20177
x <- s <- rep(NA,n)
s[1] <- sample(1:2,size=1,prob=delta)
x[1] <- rgamma(1,shape=mu.tort[s[1]]^2/sigma[s[1]]^2,scale=sigma[s[1]]^2/mu.tort[s[1]])

for (t in 2:n){
  s[t] <- sample(1:2,size=1,prob=Gamma[s[t-1],])
  x[t] <- rgamma(1,shape=mu.tort[s[t]]^2/sigma[s[t]]^2,scale=sigma[s[t]]^2/mu.tort[s[t]])
}


### fitting 2-States HMM with tortuosity
mllk.sim <- function(theta.star, x, N){
  Gamma <- diag(N) #identity matrix 
  Gamma[!Gamma] <- exp(theta.star[1:2]) #turn zeros in matrix (off-diagonal entries) into exponentials of theta-stars
  Gamma <- Gamma/rowSums(Gamma) #devide by row sums so that entries of a row sum to 1 (transformation is inverse logit link)
  delta <- solve(t(diag(N)-Gamma+1),rep(1,N)) #stationary distribution erstellen
  mu.tort <- exp(theta.star[3:4]) #Mittelwert
  sigma <- exp(theta.star[5:6]) #Varianz
  allprobs <- matrix(1,length(x),N)
  ind <- which(!is.na(x)) # indices of non-missing tortuosities
  allprobs[ind,] <- cbind(dgamma(x[ind],shape=mu.tort[1]^2/sigma[1]^2,scale=sigma[1]^2/mu.tort[1]),
                          dgamma(x[ind],shape=mu.tort[2]^2/sigma[2]^2,scale=sigma[2]^2/mu.tort[2]))
  foo <- delta%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:length(x)){
    foo <- phi%*%Gamma%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=2

#starting values
theta.star <- c(rep(-2,(N-1)*N),log(c(0.005,0.04)),log(c(0.005,0.01)))

# numerical maximization 
mod.sim <- nlm(mllk.sim,theta.star,x=x,N=N,print.level=2,iterlim=500)
theta.star.sim = mod.sim$estimate

#back-transformation
Gamma.sim <- diag(N)
Gamma.sim[!Gamma.sim] <- exp(theta.star.sim[1:((N-1)*N)])
Gamma.sim <- Gamma.sim/rowSums(Gamma.sim)
delta.sim <- solve(t(diag(N)-Gamma.sim+1),rep(1,N))
mu.sim <- exp(theta.star.sim[(N-1)*N+(N+1):(2*N)])
sigma.sim <- exp(theta.star.sim[(N-1)*N+(N+1):(2*N)])

round(Gamma.sim, 4) #Matrix auf 4 Nachkommastellen gerundet
mu.sim
sigma.sim
delta.sim

### 2-States HMM with simulated tortuosity grafische Darstellung
# State dependent distributions
hist(x,probability=TRUE,breaks=150,col="light grey",xlab="log(tort)",main="State-dependent distributions", xlim= c(0,0.1))
curve(delta.sim[1]*dgamma(x,shape=mu.sim[1]^2/sigma.sim[1]^2,scale=sigma.sim[1]^2/mu.sim[1]),add=TRUE,col="#E69F00", lwd=2)
curve(delta.sim[2]*dgamma(x,shape=mu.sim[2]^2/sigma.sim[2]^2,scale=sigma.sim[2]^2/mu.sim[2]),add=TRUE,col="#56B4E9", lwd=2)
curve(delta.sim[1]*dgamma(x,shape=mu.sim[1]^2/sigma.sim[1]^2,scale=sigma.sim[1]^2/mu.sim[1])
      +delta.sim[2]*dgamma(x,shape=mu.sim[2]^2/sigma.sim[2]^2,scale=sigma.sim[2]^2/mu.sim[2]),add=TRUE,col="black", lwd=2, lty=2)
colours <- c("#E69F00", "#56B4E9", "black")
legend("topright", inset = c(0,0), legend= c("State 1","State 2","Sum of densities"), pch = 16, col=colours)


#### model checking with pseudo residuals #####

d <- dthmm(data$log.tort, Gamma, delta, "gamma", list(shape=c(mu.tort[1]^2/sigma[1]^2,mu.tort[2]^2/sigma[2]^2),scale=c(sigma[1]^2/mu.tort[1],sigma[2]^2/mu.tort[2])))
resids <- residuals(d)

# auf Ausreißer untersuchen, da Q-Q-Plot nicht mit Inf-Werten funktioniert
which(resids==Inf)
data.resid <- data[-12009,] #Ausreißer entfernen
data.resid <- data.resid[-11997,] #Ausreißer entfernen

# Residuen neu definieren
d <- dthmm(data.resid$log.tort, Gamma, delta, "gamma", list(shape=c(mu.tort[1]^2/sigma[1]^2,mu.tort[2]^2/sigma[2]^2),scale=c(sigma[1]^2/mu.tort[1],sigma[2]^2/mu.tort[2])))
resids <- residuals(d)

#par(mfrow = c(2,2))

#Histogram of pseudo-residuals
hist(resids, freq=F)
m <- mean(resids)
s <-  sd(resids)
x <- resids
curve(dnorm(x,m,s),add=TRUE,lwd=3, col="blue")

# Normal Q-Q-Plot
qqnorm(resids)
qqline(resids)

#Time series of pseudo-residuals
plot(resids)

#ACF of the pseudo-residuals
acf(resids)

#dev.off()
