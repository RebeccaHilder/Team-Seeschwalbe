#### Team-Seeschwalbe - Tortuosity

#### Daten einlesen und bearbeiten ####
setwd("~/Uni/Lernstoff/Master/3. Semester/04 Statistical Consulting/Daten")
dat <- read.csv("slick2-h1-h2.csv")

## Pakete laden
#install.packages("HiddenMarkov")
library(HiddenMarkov)
library(moveHMM)

## Daten anzeigen
View(dat)
head(dat)

## Anzahl der Beobachtungen pro Tern
table(dat$ID)

## neue Spalte im Datensatz erstellen mit der Frequency
data2 <- dat$ID
x <- data.frame(data2, freq=ave(seq_along(data2), data2, FUN=length))
dat$freq <- x$freq

#which(data_frame$Freq >400) #welche Terns haben mehr als 400 Beobachtungen
#sum(data_frame$Freq >400) #wie viele Terns haben mehr als 400 Beobachtungen

## Datensatz nur mit Terns, die >400 bzw. >700 Beobachtungspunkte besitzen
#dat_400 <- subset(dat, dat$freq > 400)
dat_700 <- subset(dat, dat$freq > 700)

## Daten aufbereiten
data <- prepData(dat_700, type="UTM")

#### log(tortuosity) dem Datensatz beifÃ¼gen ####

## neue Spalte im Datensatz mit log von tortuosity
data$log.tort <- log(data$tortuosity)
#View(data)


#### fitting 3-States HMM with tortuosity####

mllk.tort3 <- function(theta.star3, x, N){
  Gamma3 <- diag(N)  
  Gamma3[!Gamma3] <- exp(theta.star3[1:((N-1)*N)])
  Gamma3 <- Gamma3/rowSums(Gamma3) 
  delta3 <- solve(t(diag(N)-Gamma3+1),rep(1,N)) 
  mu.tort3 <- exp(theta.star3[(N-1)*N+1:N])  #Mittelwert
  sigma.tort3 <- exp(theta.star3[(N-1)*N+(N+1):(2*N)]) #Varianz
  allprobs <- matrix(1,dim(x)[1],N)
  ind <- which(!is.na(x$log.tort)) 
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind], shape=mu.tort3[1]^2/sigma.tort3[1]^2, 
                                 scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x$log.tort[ind], shape=mu.tort3[2]^2/sigma.tort3[2]^2, 
                                 scale=sigma.tort3[2]^2/mu.tort3[2]), 
                          dgamma(x$log.tort[ind], shape=mu.tort3[3]^2/sigma.tort3[3]^2, 
                                 scale=sigma.tort3[3]^2/mu.tort3[3]))
  foo <- delta3%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    foo <- phi%*%Gamma3%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=3

# numerical maximization
theta.star3 <- c(rep(-2,(N-1)*N),log(c(0.01,0.02,0.03)),log(c(0.005,0.01,0.02)))
mod.tort3 <- nlm(mllk.tort3,theta.star3,x=data,N=N,print.level=1,iterlim=500)
theta.star3.mle <- mod.tort3$estimate

# back-transformation
Gamma3 <- diag(N)
Gamma3[!Gamma3] <- exp(theta.star3.mle[1:((N-1)*N)])
Gamma3 <- Gamma3/rowSums(Gamma3)
delta3 <- solve(t(diag(N)-Gamma3+1),rep(1,N))
mu.tort3 <- exp(theta.star3.mle[(N-1)*N+1:N])
sigma.tort3 <- exp(theta.star3.mle[(N-1)*N+(N+1):(2*N)])

round(Gamma3, 4)
mu.tort3
sigma.tort3
delta3


#### 3-States HMM visualization ####
hist(data$log.tort, probability = TRUE, breaks = 500, col = "light grey", xlab = "log(tort)",
     main = "State-dependent distributions", xlim = c(0,0.1))
colours <- c("#E69F00", "#56B4E9", "#009E73", "black")
curve(delta3[1] * dgamma(x, shape = mu.tort3[1]^2/sigma.tort3[1]^2,
                         scale = sigma.tort3[1]^2/mu.tort3[1]), add = TRUE, col = colours[1], lwd = 2) 
curve(delta3[2] * dgamma(x, shape = mu.tort3[2]^2/sigma.tort3[2]^2,
                         scale = sigma.tort3[2]^2/mu.tort3[2]), add = TRUE, col = colours[2], lwd = 2)
curve(delta3[3] * dgamma(x, shape = mu.tort3[3]^2/sigma.tort3[3]^2,
                         scale = sigma.tort3[3]^2/mu.tort3[3]), add = TRUE, col = colours[3], lwd = 2)
curve(delta3[1] * dgamma(x, shape = mu.tort3[1]^2/sigma.tort3[1]^2, 
                         scale = sigma.tort3[1]^2/mu.tort3[1])
      + delta3[2] * dgamma(x, shape = mu.tort3[2]^2/sigma.tort3[2]^2,
                           scale = sigma.tort3[2]^2/mu.tort3[2])
      + delta3[3] * dgamma(x, shape = mu.tort3[3]^2/sigma.tort3[3]^2,
                           scale = sigma.tort3[3]^2/mu.tort3[3]),
      add = TRUE, col = colours[4], lwd = 2, lty = 2)
legend("topright", inset = c(0,0), legend = c("State 1", "State 2", "State 3", "Marginal distribution"), 
       pch = 16, col = colours)


#### 3-States HMM with speed global decoding ####
viterbi3 <- function(x,mu.tort3,sigma.tort3,Gamma3,delta3){
  n <- length(x)
  allprobs <- matrix(1,n,3)
  ind <- which(!is.na(x))
  allprobs[ind,] <- cbind(dgamma(x[ind], shape=mu.tort3[1]^2/sigma.tort3[1]^2, 
                                 scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x[ind], shape=mu.tort3[2]^2/sigma.tort3[2]^2, 
                                 scale=sigma.tort3[2]^2/mu.tort3[2]), 
                          dgamma(x[ind], shape=mu.tort3[3]^2/sigma.tort3[3]^2, 
                                 scale=sigma.tort3[3]^2/mu.tort3[3]))
  xi <- matrix(0,n,3)
  foo <- delta3*allprobs[1,]
  xi[1,] <- foo/sum(foo)
  for (t in 2:n) {
    foo <- apply(xi[t-1,]*Gamma3,2,max)*allprobs[t,]
    xi[t,] <- foo/sum(foo)
  }
  iv <- numeric(n)
  iv[n] <- which.max(xi[n,])
  for (t in (n-1):1){
    iv[t] <- which.max(Gamma3[,iv[t+1]]*xi[t,])
  }
  iv
}

#### Global decoding ####

#pdf("3-States HMM tortuosity decoding.pdf", width = 8.27, height = 11.69)
par(mfrow=c(2,1))
colours <- c("#E69F00", "#56B4E9", "#009E73")
for(i in unique(data$ID)){
  x = data$log.tort[which(data$ID==i)]
  vitstates3 <- viterbi3(x, mu.tort3, sigma.tort3, Gamma3, delta3)
  plot(data$y[which(data$ID==i)] ~ data$x[which(data$ID==i)], main=i,
       xlab = "x", ylab = "y", col = colours[vitstates3], type = "p", pch = 20)
  plot(x, xlab = "time", ylab = "log(tort)", col = colours[vitstates3], type = "p", 
       pch = 20, xlim = c(0,3000), ylim = c(0,1))
}
dev.off()

#### 3-States-HMM with covariates ####

### dummy-covariate slick

mllk.slick3 <- function(theta.star,x){
  mu.tort3 <- exp(theta.star[1:3])
  sigma.tort3 <- exp(theta.star[4:6])
  delta3 <- c(plogis(theta.star[7]),plogis(theta.star[8]),plogis(theta.star[9]))
  beta3 <- cbind(theta.star[10:12],theta.star[13:15])
  allprobs <- matrix(1,dim(x)[1],3)
  ind <- which(!is.na(x$log.tort)) # indices of non-missing step lengths
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort3[1]^2/sigma.tort3[1]^2,scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort3[2]^2/sigma.tort3[2]^2,scale=sigma.tort3[2]^2/mu.tort3[2]),
                          dgamma(x$log.tort[ind],shape=mu.tort3[3]^2/sigma.tort3[3]^2,scale=sigma.tort3[3]^2/mu.tort3[3]))
  #for (j in 1:2){
  #  allprobs[,j] <- dgamma(x$step,shape=mu.step[j]^2/sigma[j]^2,scale=sigma[j]^2/mu.step[j])
  #}
  foo <- delta3%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    eta <- beta3[,1]+beta3[,2]*x[t,"slick"]
    Gamma3 <- diag(3)
    # tpm has to be updated after every new estimation of the beta values
    Gamma3[!Gamma3] <- exp(eta) # assign values to the off-diagonal entries of the Gamma-matrix
    Gamma3 <- Gamma3/rowSums(Gamma3)
    foo <- phi%*%Gamma3%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=3

#starting values
delta0 <- rep(1/3,1/3,1/3)
# choose beta0 such that the diagonal elements of the resulting Gamma matrix will be highest (similar to starting values for gamma_ij)
beta0 <- rep(-2,N*(N-1))
# here my initial guess is that our covariate has no effect on the state process and hence I set all beta1 values to zero
beta1 <- rep(0,N*(N-1))

theta.star <- c(log(mu.tort3),log(sigma.tort3),qlogis(delta0), beta0, beta1)
mod_slick3 <- nlm(mllk.slick3,theta.star,x=data,print.level=2, iterlim=500)

# natural parameters
mu_slick3 <- exp(mod_slick3$estimate[1:3])
sigma_slick3 <- exp(mod_slick3$estimate[4:6])
mu_slick3
sigma_slick3


### covariate time-to-slick
# change NAs to infinity
data$time_to_slick[is.na(data$time_to_slick)]<-Inf
# new column with inverse of time-to-slick
data$inverse.tts <- 1/(data$time_to_slick+1) # 1=near slick, 0=far away
hist(data$inverse.tts)

mllk.tts3 <- function(theta.star,x){
  mu.tort3 <- exp(theta.star[1:3])
  sigma.tort3 <- exp(theta.star[4:6])
  delta3 <- c(plogis(theta.star[7]),plogis(theta.star[8]),plogis(theta.star[9]))
  beta3 <- cbind(theta.star[10:12],theta.star[13:15])
  allprobs <- matrix(1,dim(x)[1],3)
  ind <- which(!is.na(x$log.tort)) # indices of non-missing step lengths
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort3[1]^2/sigma.tort3[1]^2,scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort3[2]^2/sigma.tort3[2]^2,scale=sigma.tort3[2]^2/mu.tort3[2]),
                          dgamma(x$log.tort[ind],shape=mu.tort3[3]^2/sigma.tort3[3]^2,scale=sigma.tort3[3]^2/mu.tort3[3]))
  #for (j in 1:2){
  #  allprobs[,j] <- dgamma(x$step,shape=mu.step[j]^2/sigma[j]^2,scale=sigma[j]^2/mu.step[j])
  #}
  foo <- delta3%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    eta <- beta3[,1]+beta3[,2]*x[t,"inverse.tts"]
    Gamma3 <- diag(3)
    # tpm has to be updated after every new estimation of the beta values
    Gamma3[!Gamma3] <- exp(eta) # assign values to the off-diagonal entries of the Gamma-matrix
    Gamma3 <- Gamma3/rowSums(Gamma3)
    foo <- phi%*%Gamma3%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=3

#starting values
delta0 <- rep(1/3,1/3,1/3)
# choose beta0 such that the diagonal elements of the resulting Gamma matrix will be highest (similar to starting values for gamma_ij)
beta0 <- rep(-2,N*(N-1))
# here my initial guess is that our covariate has no effect on the state process and hence I set all beta1 values to zero
beta1 <- rep(0,N*(N-1))

theta.star <- c(log(mu_slick3),log(sigma_slick3),qlogis(delta0), beta0, beta1)
mod_tts3 <- nlm(mllk.tts3,theta.star,x=data,print.level=2, iterlim=500)

# natural parameters
mu_tts3 <- exp(mod_tts3$estimate[1:3])
sigma_tts3 <- exp(mod_tts3$estimate[4:6])
mu_tts3
sigma_tts3
#back-transformation
Gamma_tts3 <- diag(N)
Gamma_tts3[!Gamma_tts3] <- exp(mod_tts3$estimate[1:((N-1)*N)])
Gamma_tts3 <- Gamma_tts3/rowSums(Gamma_tts3)
Gamma_tts3
Gamma.tts3 <- Gamma_tts3


#### Model selection ####
## AIC
aic <- numeric(3)
aic[1] <- 2*mod.tort3$minimum + 2*length(mod.tort3$estimate)
aic[2] <- 2*mod_slick3$minimum + 2*length(mod_slick3$estimate)
aic[3] <- 2*mod_tts3$minimum + 2*length(mod_tts3$estimate)
aic
which.min(aic) 
#plot(1:2,aic,type='b',main='AIC values',xlab='number of covariates',ylab='AIC')


## BIC
bic <- numeric(3)
T <- dim(data)[1]
bic[1] <- 2*mod.tort3$minimum + log(T)*length(mod.tort3$estimate)
bic[2] <- 2*mod_slick3$minimum + log(T)*length(mod_slick3$estimate)
bic[3] <- 2*mod_tts3$minimum + log(T)*length(mod_tts3$estimate)
bic
which.min(bic)


#### Gamma Plots ####

# Vorher Modell "covariate time-to-slick" des 2-HMM einlesen

#Gamma fÃ¼r dummy Varibale erstellen
beta_slick3 <- cbind(mod_slick3$estimate[10:12],mod_slick3$estimate[13:15])
eta3 <- beta_slick3[,1]+beta_slick3[,2]*0
#eta3 <- beta_slick3[,1]+beta_slick3[,2]*1
Gamma_slick3 <- diag(3)
Gamma_slick3[!Gamma_slick3] <- exp(eta3) # assign values to the off-diagonal entries of the Gamma-matrix
Gamma_slick3 <- Gamma_slick3/rowSums(Gamma_slick3)
Gamma_slick3

#stationÃ¤re Verteilung
delta3<-solve(t(diag(3)-Gamma_slick3+1),c(1,1,1))
delta3

#Manueller Vergleich
Gamma.tts3
Gamma3

#betas definieren
beta0_tts <- mod_tts3$estimate[10:12]
beta1_tts <- mod_tts3$estimate[13:15]
beta0_tts
beta1_tts

# changing prob 1 to 1 
Gamma11 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma11[k] <- Gamma.tts3[1,1]
}
# changing prob 2 to 2
Gamma22 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma22[k] <- Gamma.tts3[2,2]
}
# changing prob 3 to 3
Gamma33 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma33[k] <- Gamma.tts3[3,3]
}
# changing prob 1 to 2 
Gamma12 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma12[k] <- Gamma.tts3[1,2]
}
# changing prob 1 to 3
Gamma13 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma13[k] <- Gamma.tts3[1,3]
}
# changing prob 2 to 1 
Gamma21 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma21[k] <- Gamma.tts3[2,1]
}
# changing prob 2 to 3 
Gamma23 <- rep(NA,1000)
slick.seq <- seq(0,1, length = 1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma23[k] <- Gamma.tts3[2,3]
}
# changing prob 3 to 1 
Gamma31 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma31[k] <- Gamma.tts3[3,1]
}
# changing prob 3 to 2 
Gamma32 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma32[k] <- Gamma.tts3[3,2]
}

# graphical illustration
par(mfrow = c(3,3))
plot(Gamma11 ~ tts.seq, main = "Gamma11", ylab = "P(1->1)", xlab = "tts", ylim = c(0.95,1), 
     type="l", lwd=5)
plot(Gamma12 ~ tts.seq, main = "Gamma12", ylab = "P(1->2)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma13 ~ tts.seq, main = "Gamma13", ylab = "P(1->3)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma21 ~ tts.seq, main = "Gamma21", ylab = "P(2->1)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma22 ~ tts.seq, main = "Gamma22", ylab = "P(2->2)", xlab = "tts", ylim = c(0.95,1), 
     type="l", lwd=5)
plot(Gamma23 ~ tts.seq, main = "Gamma23", ylab = "P(2->3)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma31 ~ tts.seq, main = "Gamma31", ylab = "P(3->1)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma32 ~ tts.seq, main = "Gamma32", ylab = "P(3->2)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma33 ~ tts.seq, main = "Gamma33", ylab = "P(3->3)", xlab = "tts", ylim = c(0.95,1), 
     type="l", lwd=5)
dev.off()


#### model checking simulation####

#delta<-solve(t(diag(2)-Gamma_slick+1),c(1,1))
#delta
delta3<-solve(t(diag(3)-Gamma_slick3+1),c(1,1,1))
delta3

set.seed(7265)
n <- 20177
x <- s <- rep(NA,n)
#s[1] <- sample(1:2,size=1,prob=delta3)
s[1] <- sample(1:3,size=1,prob=delta3)
x[1] <- rgamma(1,shape=mu.tort[s[1]]^2/sigma[s[1]]^2,scale=sigma[s[1]]^2/mu.tort[s[1]])

for (t in 2:n){
  s[t] <- sample(1:2,size=1,prob=Gamma[s[t-1],])
  x[t] <- rgamma(1,shape=mu.tort[s[t]]^2/sigma[s[t]]^2,scale=sigma[s[t]]^2/mu.tort[s[t]])
}

#fit 3-state HMM with tortuosity
mllk.tort3.sim <- function(theta.star3, x, N){
  Gamma3 <- diag(N)  
  Gamma3[!Gamma3] <- exp(theta.star3[1:((N-1)*N)])
  Gamma3 <- Gamma3/rowSums(Gamma3) 
  delta3 <- solve(t(diag(N)-Gamma3+1),rep(1,N)) 
  mu.tort3 <- exp(theta.star3[(N-1)*N+1:N])  #Mittelwert
  sigma.tort3 <- exp(theta.star3[(N-1)*N+(N+1):(2*N)]) #Varianz
  allprobs <- matrix(1,length(x),N)
  ind <- which(!is.na(x)) 
  allprobs[ind,] <- cbind(dgamma(x[ind], shape=mu.tort3[1]^2/sigma.tort3[1]^2, 
                                 scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x[ind], shape=mu.tort3[2]^2/sigma.tort3[2]^2, 
                                 scale=sigma.tort3[2]^2/mu.tort3[2]), 
                          dgamma(x[ind], shape=mu.tort3[3]^2/sigma.tort3[3]^2, 
                                 scale=sigma.tort3[3]^2/mu.tort3[3]))
  foo <- delta3%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:length(x)){
    foo <- phi%*%Gamma3%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=3

# numerical maximization
theta.star3 <- c(rep(-2,(N-1)*N),log(c(0.01,0.02,0.03)),log(c(0.005,0.01,0.02)))
mod.tort3.sim <- nlm(mllk.tort3.sim,theta.star3,x=x,N=N,print.level=1,iterlim=500)
theta.star3.mle.sim <- mod.tort3.sim$estimate

# back-transformation
Gamma3.sim <- diag(N)
Gamma3.sim[!Gamma3.sim] <- exp(theta.star3.mle.sim[1:((N-1)*N)])
Gamma3.sim <- Gamma3.sim/rowSums(Gamma3.sim)
delta3.sim <- solve(t(diag(N)-Gamma3.sim+1),rep(1,N))
mu.tort3.sim <- exp(theta.star3.mle.sim[(N-1)*N+1:N])
sigma.tort3.sim <- exp(theta.star3.mle.sim[(N-1)*N+(N+1):(2*N)])

round(Gamma3.sim, 4)
mu.tort3.sim
sigma.tort3.sim
delta3.sim


#### model checking with pseudo residuals #####

d <- dthmm(data$log.tort, Gamma3, delta3, "gamma",
           list(shape=c(mu.tort3[1]^2/sigma.tort3[1]^2,mu.tort3[2]^2/sigma.tort3[2]^2,mu.tort3[3]^2/sigma.tort3[3]^2),
                scale=c(sigma.tort3[1]^2/mu.tort3[1],sigma.tort3[2]^2/mu.tort3[2],sigma.tort3[3]^2/mu.tort3[3])))
resids <- residuals(d)
# auf AusreiÃer untersuchen, da Q-Q-Plot nicht mit Inf-Werten funktioniert
which(resids==Inf) #kommt bei 3-states nicht vor

#par(mfrow = c(2,2))

#Histogram of pseudo-residuals
hist(resids, freq=F)
m <- mean(resids)
s <-  sd(resids)
x <- resids
curve(dnorm(x,m,s),add=TRUE,lwd=3, col="blue")

# Normal Q-Q-Plot
qqnorm(resids)
qqline(resids)

#Time series of pseudo-residuals
plot(resids)

#ACF of the pseudo-residuals
acf(resids)

#dev.off()
