
############################################################################  
#######  3-States HMM for seebirds with tortuosity with new dataset  #######
############################################################################                                                                                

#### Import and edit data ####
setwd("~/Uni/Lernstoff/Master/3. Semester/04 Statistical Consulting/Daten")
# New dataset
dat <- read.csv("NEW_slick2-h1-h2.csv")
# Recoding the first column name
colnames(dat)[1] <- "ID"
# Replace all values greater than 4 with NA
#T4 <-which(dat$time_to_slick>=4)
#dat$time_to_slick[T4]<- "NaN"
#table(dat$time_to_slick=="NaN")

## Load packages
#install.packages("HiddenMarkov")
library(HiddenMarkov)
library(moveHMM)

## Overview
View(dat)
head(dat)
table(dat$ID) # Number of observations per tern
#which(dat$Freq >700) #which terns have more than 700 observations
#sum(dat$Freq >700)   #how many terns have more than 700 observations

## Dataset only with terns that have >700 observation points
# Create new column with frequency for 
#data2 <- dat$ID
#x <- data.frame(data2, freq=ave(seq_along(data2), data2, FUN=length))
#dat$freq <- x$freq
# New datatset
#dat_700 <- subset(dat, dat$freq > 700)


## For all data points:
#High values must be changed
which(dat$tortuosity==1)
ind<-which(dat$tortuosity==1)
dat$tortuosity[ind]<-rep(1.01,length(ind)) 


## Prepare data
#data <- prepData(dat_700, type="UTM")
data <- prepData(dat, type="UTM")

## First overview of flight characteristics
for(i in unique(data$ID)){
  plot(data$y[which(data$ID==i)]~data$x[which(data$ID==i)],main=i,xlab="x",ylab="y",type="p", pch=20)
} 
#Tern-h2-51 is amazing

#### Using log(tortuosity) ####
## new column in dataset with log of tortuosity
data$log.tort <- log(data$tortuosity)
#View(data)

#### Fitting 3-States HMM with tortuosity####

mllk.tort3 <- function(theta.star3, x, N){
  Gamma3 <- diag(N)  
  Gamma3[!Gamma3] <- exp(theta.star3[1:((N-1)*N)])
  Gamma3 <- Gamma3/rowSums(Gamma3) 
  delta3 <- solve(t(diag(N)-Gamma3+1),rep(1,N)) 
  mu.tort3 <- cumsum(exp(theta.star3[(N-1)*N+1:N]))  #Mittelwert
  sigma.tort3 <- cumsum(exp(theta.star3[(N-1)*N+(N+1):(2*N)])) #Varianz
  allprobs <- matrix(1,dim(x)[1],N)
  ind <- which(!is.na(x$log.tort)) 
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind], shape=mu.tort3[1]^2/sigma.tort3[1]^2, 
                                 scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x$log.tort[ind], shape=mu.tort3[2]^2/sigma.tort3[2]^2, 
                                 scale=sigma.tort3[2]^2/mu.tort3[2]), 
                          dgamma(x$log.tort[ind], shape=mu.tort3[3]^2/sigma.tort3[3]^2, 
                                 scale=sigma.tort3[3]^2/mu.tort3[3]))
  foo <- delta3%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    foo <- phi%*%Gamma3%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=3

# Finding starting values
hist(data$log.tort, breaks=1000, main = "Histogram of log(tortuosity)", xlab = "log(tort)", xlim=c(0,0.1))
# Starting values
theta.star3 <- c(rep(-2,(N-1)*N),log(c(0.01,0.02,0.03)),log(c(0.005,0.01,0.02)))

# Numerical maximization 
mod.tort3 <- nlm(mllk.tort3,theta.star3,x=data,N=N,print.level=2,iterlim=500, stepmax = 10)
theta.star3.mle <- mod.tort3$estimate

# Back-transformation
Gamma3 <- diag(N)
Gamma3[!Gamma3] <- exp(theta.star3.mle[1:((N-1)*N)])
Gamma3 <- Gamma3/rowSums(Gamma3)
delta3 <- solve(t(diag(N)-Gamma3+1),rep(1,N))
mu.tort3 <- cumsum(exp(theta.star3.mle[(N-1)*N+1:N]))
sigma.tort3 <- cumsum(exp(theta.star3.mle[(N-1)*N+(N+1):(2*N)]))

round(Gamma3, 4)
mu.tort3
sigma.tort3
delta3


#### 3-States HMM visualization ####
hist(data$log.tort, probability = TRUE, breaks = 500, col = "light grey", xlab = "log(tort)",
     main = "State-dependent distributions", xlim = c(0,0.1))
colors <- c("#E69F00", "#009E73", "#56B4E9", "black")
curve(delta3[1] * dgamma(x, shape = mu.tort3[1]^2/sigma.tort3[1]^2,
                         scale = sigma.tort3[1]^2/mu.tort3[1]), add = TRUE, col = colors[1], lwd = 2 , n=1001) 
curve(delta3[2] * dgamma(x, shape = mu.tort3[2]^2/sigma.tort3[2]^2,
                         scale = sigma.tort3[2]^2/mu.tort3[2]), add = TRUE, col = colors[2], lwd = 2 , n=1001)
curve(delta3[3] * dgamma(x, shape = mu.tort3[3]^2/sigma.tort3[3]^2,
                         scale = sigma.tort3[3]^2/mu.tort3[3]), add = TRUE, col = colors[3], lwd = 2 , n=1001)
curve(delta3[1] * dgamma(x, shape = mu.tort3[1]^2/sigma.tort3[1]^2, 
                         scale = sigma.tort3[1]^2/mu.tort3[1])
      + delta3[2] * dgamma(x, shape = mu.tort3[2]^2/sigma.tort3[2]^2,
                           scale = sigma.tort3[2]^2/mu.tort3[2])
      + delta3[3] * dgamma(x, shape = mu.tort3[3]^2/sigma.tort3[3]^2,
                           scale = sigma.tort3[3]^2/mu.tort3[3]),
      add = TRUE, col = colors[4], lwd = 2, lty = 2 , n=1001)
legend("topright", inset = c(0,0), legend = c("State 1: Flying", "State 2: Searching/Hovering", "State 3: Foraging", "Marginal distribution"), 
       pch = 16, col = colors)


#### Global decoding ####

viterbi3 <- function(x,mu.tort3,sigma.tort3,Gamma3,delta3){
  n <- length(x)
  allprobs <- matrix(1,n,3)
  ind <- which(!is.na(x))
  allprobs[ind,] <- cbind(dgamma(x[ind], shape=mu.tort3[1]^2/sigma.tort3[1]^2, 
                                 scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x[ind], shape=mu.tort3[2]^2/sigma.tort3[2]^2, 
                                 scale=sigma.tort3[2]^2/mu.tort3[2]), 
                          dgamma(x[ind], shape=mu.tort3[3]^2/sigma.tort3[3]^2, 
                                 scale=sigma.tort3[3]^2/mu.tort3[3]))
  xi <- matrix(0,n,3)
  foo <- delta3*allprobs[1,]
  xi[1,] <- foo/sum(foo)
  for (t in 2:n) {
    foo <- apply(xi[t-1,]*Gamma3,2,max)*allprobs[t,]
    xi[t,] <- foo/sum(foo)
  }
  iv <- numeric(n)
  iv[n] <- which.max(xi[n,])
  for (t in (n-1):1){
    iv[t] <- which.max(Gamma3[,iv[t+1]]*xi[t,])
  }
  iv
}


#pdf("3-States HMM tortuosity decoding.pdf", width = 8.27, height = 11.69)
par(mfrow=c(2,1))
colors <- c("#E69F00", "#009E73", "#56B4E9")
for(i in unique(data$ID)){
  x = data$log.tort[which(data$ID==i)]
  vitstates3 <- viterbi3(x, mu.tort3, sigma.tort3, Gamma3, delta3)
  plot(data$y[which(data$ID==i)] ~ data$x[which(data$ID==i)], main=i,
       xlab = "x", ylab = "y", col = colors[vitstates3], type = "p", pch = 20)
  plot(x, xlab = "time", ylab = "log(tort)", col = colors[vitstates3], type = "p", 
       pch = 20, xlim = c(0,3000), ylim = c(0,0.6))
}
par(mfrow=c(1,1))
#dev.off()

# For one animal (tern h2-51)
i <- "Tern-h2-51"
x = data$log.tort[which(data$ID==i)]
vitstates3 <- viterbi3(x, mu.tort3, sigma.tort3, Gamma3, delta3)
plot(data$y[which(data$ID==i)] ~ data$x[which(data$ID==i)], main=i,
     xlab = "x", ylab = "y", col = colours[vitstates3], type = "p", pch = 20)
plot(x, xlab = "time", ylab = "log(tort)", col = colours[vitstates3], main=i, type = "p", 
     pch = 20, xlim = c(0,3000), ylim = c(0,1))
#plot(x, xlab = "time", ylab = "log(tort)", col = colours[vitstates3], main=i, type = "p", 
#     pch = 20, xlim = c(0,3000), ylim = c(0,0.08))



#### 3-States-HMM with covariates ####

### Dummy-covariate slick 
mllk.slick3 <- function(theta.star,x){
  mu.tort3 <- cumsum(exp(theta.star[1:3]))
  sigma.tort3 <- cumsum(exp(theta.star[4:6]))
  delta3 <- c(1,exp(theta.star[7:8])/sum(c(1,exp(theta.star[7:8]))))
  beta3 <- cbind(theta.star[9:14],theta.star[15:20])
  allprobs <- matrix(1,dim(x)[1],3)
  ind <- which(!is.na(x$log.tort)) # indices of non-missing step lengths
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort3[1]^2/sigma.tort3[1]^2,scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort3[2]^2/sigma.tort3[2]^2,scale=sigma.tort3[2]^2/mu.tort3[2]),
                          dgamma(x$log.tort[ind],shape=mu.tort3[3]^2/sigma.tort3[3]^2,scale=sigma.tort3[3]^2/mu.tort3[3]))
  #for (j in 1:2){
  #  allprobs[,j] <- dgamma(x$step,shape=mu.step[j]^2/sigma[j]^2,scale=sigma[j]^2/mu.step[j])
  #}
  foo <- delta3%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    eta <- beta3[,1]+beta3[,2]*x[t,"slick"]
    Gamma3 <- diag(3)
    # tpm has to be updated after every new estimation of the beta values
    Gamma3[!Gamma3] <- exp(eta) # assign values to the off-diagonal entries of the Gamma-matrix
    Gamma3 <- Gamma3/rowSums(Gamma3)
    foo <- phi%*%Gamma3%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=3

# Starting values
delta0 <- c(0,0)
beta0 <- rep(-2,N*(N-1))
beta1 <- rep(0,N*(N-1))

# Numerical maximization 
#mu.tort3 <- c(0.086722511, 0.002752783 ,0.011802427)
#sigma.tort3 <- c(0.086630512, 0.001734018, 0.004862065)
theta.star <- c(log(mu.tort3), log(sigma.tort3), delta0, beta0, beta1)
mod_slick3 <- nlm(mllk.slick3,theta.star,x=data,print.level=2, iterlim=500, stepmax = 10)

# Back-transformation
mu_slick3 <- cumsum(exp(mod_slick3$estimate[1:3]))
sigma_slick3 <- cumsum(exp(mod_slick3$estimate[4:6]))
mu_slick3
sigma_slick3


### Covariate time-to-slick

# Change NAs to infinity
data$time_to_slick[is.na(data$time_to_slick)]<-Inf
# new column with inverse of time-to-slick (proximity to slick)
data$inverse.tts <- 1/(data$time_to_slick+1) # 1=near slick, 0=far away
hist(data$inverse.tts)

# 3-States HMM for time-to-slick
mllk.tts3 <- function(theta.star,x){
  mu.tort3 <- cumsum(exp(theta.star[1:3]))
  sigma.tort3 <- cumsum(exp(theta.star[4:6]))
  delta3 <- c(1,exp(theta.star[7:8]))/sum(c(1,exp(theta.star[7:8])))
  beta3 <- cbind(theta.star[9:14],theta.star[15:20])
  allprobs <- matrix(1,dim(x)[1],3)
  ind <- which(!is.na(x$log.tort)) # indices of non-missing step lengths
  allprobs[ind,] <- cbind(dgamma(x$log.tort[ind],shape=mu.tort3[1]^2/sigma.tort3[1]^2,scale=sigma.tort3[1]^2/mu.tort3[1]),
                          dgamma(x$log.tort[ind],shape=mu.tort3[2]^2/sigma.tort3[2]^2,scale=sigma.tort3[2]^2/mu.tort3[2]),
                          dgamma(x$log.tort[ind],shape=mu.tort3[3]^2/sigma.tort3[3]^2,scale=sigma.tort3[3]^2/mu.tort3[3]))
  #for (j in 1:2){
  #  allprobs[,j] <- dgamma(x$step,shape=mu.step[j]^2/sigma[j]^2,scale=sigma[j]^2/mu.step[j])
  #}
  foo <- delta3%*%diag(allprobs[1,])
  l <- log(sum(foo))
  phi <- foo/sum(foo)
  for (t in 2:dim(x)[1]){
    eta <- beta3[,1]+beta3[,2]*x[t,"inverse.tts"]
    Gamma3 <- diag(3)
    # tpm has to be updated after every new estimation of the beta values
    Gamma3[!Gamma3] <- exp(eta) # assign values to the off-diagonal entries of the Gamma-matrix
    Gamma3 <- Gamma3/rowSums(Gamma3)
    foo <- phi%*%Gamma3%*%diag(allprobs[t,])
    l <- l+log(sum(foo))
    phi <- foo/sum(foo)
  }
  return(-l)
}

N=3

# Starting values
delta0 <- c(0,0)
beta0 <- rep(-2,N*(N-1))
beta1 <- rep(0,N*(N-1))

# Numerical maximization 
theta.star <- c(log(mu_slick3), log(sigma_slick3), delta0, beta0, beta1)
mod_tts3 <- nlm(mllk.tts3,theta.star,x=data,print.level=2, iterlim=500, stepmax = 10)

# Back-transformation
mu_tts3 <- cumsum(exp(mod_tts3$estimate[1:3]))
sigma_tts3 <- cumsum(exp(mod_tts3$estimate[4:6]))
mu_tts3
sigma_tts3

# Testing for global maximum
#llks_tts <- rep(NA,10)
#mods_tts <- vector("list")
#for(k in 1:10){
#  theta.star.tts <- c(sort(log(runif(3,0.001,0.07))),sort(log(runif(3,0.002,0.15))),0,0,rep(-2,6),rep(0,6))
#  mods_tts[[k]] <- nlm(mllk.tts3,theta.star.tts,x=data,print.level=2)
#  llks_tts[k] <- -mods_tts[[k]]$minimum
#}


#### Model selection ####
## AIC
aic <- numeric(3)
aic[1] <- 2*mod.tort3$minimum + 2*length(mod.tort3$estimate)
aic[2] <- 2*mod_slick3$minimum + 2*length(mod_slick3$estimate)
aic[3] <- 2*mod_tts3$minimum + 2*length(mod_tts3$estimate)
aic
which.min(aic) 
#plot(1:2,aic,type='b',main='AIC values',xlab='number of covariates',ylab='AIC')


## BIC
bic <- numeric(3)
T <- dim(data)[1]
bic[1] <- 2*mod.tort3$minimum + log(T)*length(mod.tort3$estimate)
bic[2] <- 2*mod_slick3$minimum + log(T)*length(mod_slick3$estimate)
bic[3] <- 2*mod_tts3$minimum + log(T)*length(mod_tts3$estimate)
bic
which.min(bic)


#### Gamma Plots ####

# Generate the 2-HMM with covariate "time-to-slick" first

# Create gamma for dummy varibale
beta_slick3 <- cbind(mod_slick3$estimate[10:12],mod_slick3$estimate[13:15])
eta3 <- beta_slick3[,1]+beta_slick3[,2]*0
#eta3 <- beta_slick3[,1]+beta_slick3[,2]*1
Gamma_slick3 <- diag(3)
Gamma_slick3[!Gamma_slick3] <- exp(eta3) # assign values to the off-diagonal entries of the Gamma-matrix
Gamma_slick3 <- Gamma_slick3/rowSums(Gamma_slick3)
Gamma_slick3

# Stationary distribution
delta3<-solve(t(diag(3)-Gamma_slick3+1),c(1,1,1))
delta3

# Comparison by hand
Gamma3
Gamma_slick3

# Assign betas
beta0_tts <- mod_tts3$estimate[9:14]
beta1_tts <- mod_tts3$estimate[15:20]
beta0_tts
beta1_tts

tts.seq <- seq(0,1, length = 1000)

## Plots ##

# Changing prob 1 to 1 
Gamma11 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma11[k] <- Gamma.tts3[1,1]
}
# Changing prob 2 to 2
Gamma22 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma22[k] <- Gamma.tts3[2,2]
}
# Changing prob 3 to 3
Gamma33 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma33[k] <- Gamma.tts3[3,3]
}
# Changing prob 1 to 2 
Gamma12 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma12[k] <- Gamma.tts3[1,2]
}
# Changing prob 1 to 3
Gamma13 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma13[k] <- Gamma.tts3[1,3]
}
# Changing prob 2 to 1 
Gamma21 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma21[k] <- Gamma.tts3[2,1]
}
# Changing prob 2 to 3 
Gamma23 <- rep(NA,1000)
slick.seq <- seq(0,1, length = 1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma23[k] <- Gamma.tts3[2,3]
}
# Changing prob 3 to 1 
Gamma31 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma31[k] <- Gamma.tts3[3,1]
}
# Changing prob 3 to 2 
Gamma32 <- rep(NA,1000)
tts.seq <- seq(0,1, length = 1000)
for (k in 1:1000) {
  eta <- beta0_tts + beta1_tts*tts.seq[k]
  Gamma.tts3 <- diag(3)
  Gamma.tts3[!Gamma.tts3] <- exp(eta) 
  Gamma.tts3 <- Gamma.tts3/rowSums(Gamma.tts3)
  Gamma32[k] <- Gamma.tts3[3,2]
}

# Graphical illustration
par(mfrow = c(3,3))
plot(Gamma11 ~ tts.seq, main = "Gamma11", ylab = "P(1->1)", xlab = "tts", ylim = c(0.95,1), 
     type="l", lwd=5)
plot(Gamma12 ~ tts.seq, main = "Gamma12", ylab = "P(1->2)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma13 ~ tts.seq, main = "Gamma13", ylab = "P(1->3)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma21 ~ tts.seq, main = "Gamma21", ylab = "P(2->1)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma22 ~ tts.seq, main = "Gamma22", ylab = "P(2->2)", xlab = "tts", ylim = c(0.95,1), 
     type="l", lwd=5)
plot(Gamma23 ~ tts.seq, main = "Gamma23", ylab = "P(2->3)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma31 ~ tts.seq, main = "Gamma31", ylab = "P(3->1)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma32 ~ tts.seq, main = "Gamma32", ylab = "P(3->2)", xlab = "tts", ylim = c(0,0.05), 
     type="l", lwd=5)
plot(Gamma33 ~ tts.seq, main = "Gamma33", ylab = "P(3->3)", xlab = "tts", ylim = c(0.95,1), 
     type="l", lwd=5)
par(mfrow = c(1,1))


#### Model checking with simulation####
set.seed(7265)
n <- 20177
x <- s <- rep(NA,n)
s[1] <- sample(1:3,size=1,prob=delta3)
x[1] <- rgamma(1,shape=mu.tort3[s[1]]^2/sigma.tort3[s[1]]^2,scale=sigma.tort3[s[1]]^2/mu.tort3[s[1]])

for (t in 2:n){
  s[t] <- sample(1:3,size=1,prob=Gamma3[s[t-1],])
  x[t] <- rgamma(1,shape=mu.tort3[s[t]]^2/sigma.tort3[s[t]]^2,scale=sigma.tort3[s[t]]^2/mu.tort3[s[t]])
}

# Graphical comparison
par(mfrow = c(1,2))
hist(x,xlim=c(0,0.2),breaks=seq(0,2.5,length=200)) #Simulated data
hist(data$log.tort,xlim=c(0,0.2),breaks=seq(0,2.5,length=200)) #Emprical data


#### Model checking with pseudo residuals #####

d <- dthmm(data$log.tort, Gamma3, delta3, "gamma",
           list(shape=c(mu.tort3[1]^2/sigma.tort3[1]^2,mu.tort3[2]^2/sigma.tort3[2]^2,mu.tort3[3]^2/sigma.tort3[3]^2),
                scale=c(sigma.tort3[1]^2/mu.tort3[1],sigma.tort3[2]^2/mu.tort3[2],sigma.tort3[3]^2/mu.tort3[3])))
resids <- residuals(d)

# Check for outliers, because Q-Q plot does not work with INF values
which(resids==Inf) #no values with 3 states model
# Remove outliers
data.resid <- data[-17092,] # remove 17092
data.resid <- data.resid[-17092,] # remove 17092 (Have to be repeated, cause numbering changes)

# Redefine residuals
d <- dthmm(data.resid$log.tort, Gamma3, delta3, "gamma",
           list(shape=c(mu.tort3[1]^2/sigma.tort3[1]^2,mu.tort3[2]^2/sigma.tort3[2]^2,mu.tort3[3]^2/sigma.tort3[3]^2),
                scale=c(sigma.tort3[1]^2/mu.tort3[1],sigma.tort3[2]^2/mu.tort3[2],sigma.tort3[3]^2/mu.tort3[3])))
resids <- residuals(d)

## Plots
#par(mfrow = c(2,2))

# Histogram of pseudo-residuals
hist(resids, freq=F)
m <- mean(resids)
s <-  sd(resids)
x <- resids
curve(dnorm(x,m,s),add=TRUE,lwd=3, col="blue")

# Normal Q-Q-Plot
qqnorm(resids)
qqline(resids)

# Time series of pseudo-residuals
plot(resids)

# ACF of the pseudo-residuals
acf(resids)

#par(mfrow = c(1,1))

# Time series of pseudo-residuals
plot(resids)
plot(resids, col=ifelse(resids>=4,"orange","black"), pch=ifelse(resids>=4,1,1))
data.resid$residuals <- resids

which(resids>4)
table(data.resid[which(resids>4),]$ID)

data.resid.outlier <- rbind(data.resid[which(resids>4),])
plot(data.resid.outlier$residuals)

## Time series decoded for log(tort) of all outliers
plot(data.resid.outlier$log.tort,xlab="time",ylab="log(tort)",col=colors[vitstates3],type="p", pch=20)#, ylim=c(0,1))
legend("topright", inset = c(0,0), legend= c("State 1","State 2"), pch = 16, col=colors)

par(mfrow = c(2,4))

## Time series decoded separately
colors <- c("#E69F00", "#009E73", "#56B4E9")
for(i in unique(data.resid.outlier$ID)){
  x=data.resid.outlier$log.tort[which(data.resid.outlier$ID==i)]
  vitstates3 <- viterbi3(x, mu.tort3, sigma.tort3, Gamma3, delta3)
  plot(x,xlab="time",ylab="log(tort)",main=i,col=colors[vitstates3],type="p",lwd=5, pch=20) # , ylim=c(0,2.5))
  legend("bottomright", inset = c(0,0), legend= c("State 1","State 2", "State 3"), pch = 16, col=colors)
}


#### Likelohood-Ratio-Test ####

# H0: both models equally good
# H1: the larger model is the better one
## LRT 3-states
(-1)*2*mod_tts3$minimum-(-1)*2*mod.tort3$minimum #84.39718
qchisq(0.95,6) #12.59159
# 84.39718 > 12.59159 -> reject H0
# model, which includes time-to-slick, is significantly better

